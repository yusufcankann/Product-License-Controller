syntax = "proto3";
option java_multiple_files = true;
package com.validation.service;

import "google/protobuf/timestamp.proto";

service CompanyServiceRegistrationProduct {
  rpc registerProduct (Product) returns (Product);
  rpc registerProducts (stream Product) returns (stream Product);
  rpc deleteProductByRegistrationIdAndBrand(Product) returns (Product);
  rpc getProductsByBrand(Product) returns (stream Product);
  rpc getProductsByBrandAndProductName(Product) returns (stream Product);
  rpc getProductByRegistrationIdAndBrandAndName(Product) returns (Product);
  rpc getProductByRegistrationIdAndBrand(Product) returns (Product);
}

service CompanyService {
  rpc getCompanies(Company) returns (stream Company);
  rpc getCompaniesBySector(Company) returns (stream Company);
  rpc getCompaniesByName(Company) returns (stream Company);
  rpc getCompanyByNameAndSector(Company) returns (Company);
  rpc addCompany(Company) returns (Company);
}

service RegistrationService {
  rpc registerProduct (Product) returns (Product);
  rpc registerProducts (stream Product) returns (stream Product);
  rpc deleteProductByRegistrationIdAndBrand(Product) returns (Product);
  rpc getProductsByBrand(Product) returns (stream Product);
  rpc getProductsByBrandAndProductName(Product) returns (stream Product);
  rpc getProductByRegistrationIdAndBrandAndName(Product) returns (Product);
  rpc getProductByRegistrationIdAndBrand(Product) returns (Product);
}

service RegistrationServiceCompany{
  rpc getCompanies(Company) returns (stream Company);
  rpc getCompaniesBySector(Company) returns (stream Company);
  rpc getCompaniesByName(Company) returns (stream Company);
  rpc getCompanyByNameAndSector(Company) returns (Company);
  rpc addCompany(Company) returns (Company);
}

service InventoryService {
  rpc addProduct (Product) returns (Product);
  rpc addProducts (stream Product) returns (stream Product);
  rpc deleteProductByRegistrationIdAndBrand(Product) returns (Product);
  rpc getProductsByBrand(Product) returns (stream Product);
  rpc getProductsByBrandAndProductName(Product) returns (stream Product);
  rpc getProductByRegistrationIdAndBrandAndName(Product) returns (Product);
  rpc getProductByRegistrationIdAndBrand(Product) returns (Product);
  rpc getProductByValidationObject(ValidationRequest) returns (Product);
}

service ProductInfoService {
  rpc validateProducts (ValidationRequest) returns (Product);
  rpc registerProduct (Product) returns (Product);
  rpc registerProducts (stream Product) returns (stream Product);
  rpc deleteProductByRegistrationIdAndBrand(Product) returns (Product);
  rpc getProductsByBrand(Product) returns (stream Product);
  rpc getProductsByBrandAndProductName(Product) returns (stream Product);
  rpc getProductByRegistrationIdAndBrandAndName(Product) returns (Product);
  rpc getProductByRegistrationIdAndBrand(Product) returns (Product);
}

service ValidationService{
  rpc validateProduct(ValidationRequest) returns (Product);
}

service UserService{
  rpc validateProduct(ValidationRequest) returns (Product);
}

service NonRegisteredUserService{
  rpc validateProduct(ValidationRequest) returns (Product);
}

// The response message containing the greetings
message Product {
  string registrationId = 1;
  string productId = 2;
  string productName = 3;
  string brand = 4;
  google.protobuf.Timestamp productionDate = 5;
  google.protobuf.Timestamp expireDate = 6;
  bool isExpandable = 7;
  ProductionSite productionSite = 8;
  google.protobuf.Timestamp creationTime = 9;
  bool isValid = 10;
}

message ProductionSite{
  string country = 1;
  string city = 2;
  string postcode = 3;
}

message ValidationRequest {
  string registrationId = 1;
  string brand = 2;
}

message Company{
  string name=1;
  string sector=2;
}

